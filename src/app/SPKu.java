/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import java.awt.Frame;
import java.util.List;
import javax.swing.table.DefaultTableModel;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

/**
 *
 * @author nishom
 */
public class SPKu extends javax.swing.JFrame {

    /**
     * Creates new form SPK
     */
    public SPKu() {
        initComponents();

        setLocationRelativeTo(null);
        setExtendedState(Frame.MAXIMIZED_BOTH);
        loadKriteria();
        loadAlternatif();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCari = new javax.swing.JTextField();
        btnCari = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKriteria = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TBLaLTERNATIF = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        hasilPembobotan = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("SELEKSI PENERIMAAN PESERTA DIDIK BARU");

        txtCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCariKeyReleased(evt);
            }
        });

        btnCari.setText("Cari");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(jLabel1)
                .addContainerGap(183, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCari)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCari)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 873, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel6.setPreferredSize(new java.awt.Dimension(873, 50));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 873, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 309, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        tblKriteria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblKriteria);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Kriteria", jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setPreferredSize(new java.awt.Dimension(873, 50));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 873, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        TBLaLTERNATIF.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TBLaLTERNATIF);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Alternatif", jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel8.setPreferredSize(new java.awt.Dimension(873, 50));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 873, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        hasilPembobotan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(hasilPembobotan);

        jPanel5.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Pembobotan", jPanel5);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonTrans2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTrans2ActionPerformed
        // TODO add your handling code here:
        SPK_SAW();
    }//GEN-LAST:event_buttonTrans2ActionPerformed

    private void txtCariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCariKeyReleased
        String key = txtCari.getText();
        String where = " WHERE "
        + "nama_menu LIKE '%"+key+"%' OR "
        + "harga_menu LIKE '%"+key+"%' OR "
        + "stok LIKE '%"+key+"%' OR "
        + "jenis_menu_id LIKE '%"+key+"%'";
        ViewDataMenu(where);
    }//GEN-LAST:event_txtCariKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SPKu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SPKu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SPKu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SPKu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SPKu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TBLaLTERNATIF;
    private javax.swing.JButton btnCari;
    private javax.swing.JTable hasilPembobotan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblKriteria;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables

    private void loadKriteria() {
        try {
            Object[][] data = null;
            Object[] header = {"ID", "KRITERIA", "BOBOT", "LABEL"};
            DefaultTableModel model = new DefaultTableModel(data, header);
            tblKriteria.setModel(model);

            //load data from DB
            Connection koneksi = Koneksi.konekKeDB();
            Statement st = koneksi.createStatement();
            String query = "SELECT * FROM kriteria";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id_kriteria");
                String nama = rs.getString("nama");
                String bobot = rs.getString("bobot");
                String label = rs.getString("label");
                Object[] d = {id, nama, bobot, label};
                model.addRow(d);
            }
        } catch (Exception e) {

        }
    }

    private void loadAlternatif() {
        try {
            Object[][] data = null;
            Object[] header = {"ID", "NAMA", "DESKRIPSI", "HARGA", "KUALITAS", "FITUR", "POPULER", "PURNA JUAL", "KEAWETAN"};
            DefaultTableModel model = new DefaultTableModel(data, header);
            TBLaLTERNATIF.setModel(model);

            //load data from DB
            Connection koneksi = Koneksi.konekKeDB();
            Statement st = koneksi.createStatement();
            String query = "SELECT * FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id");
                String nama = rs.getString("nama");
                String des = rs.getString("deskripsi");
                String harga = rs.getString("harga");
                String kualitas = rs.getString("kualitas");
                String fitur = rs.getString("fitur");
                String populer = rs.getString("populer");
                String purnaJual = rs.getString("purna_jual");
                String keawetan = rs.getString("keawetan");

                Object[] d = {id, nama, des, harga, kualitas, fitur, populer, purnaJual, keawetan};
                model.addRow(d);
            }
        } catch (Exception e) {

        }
    }

    private void SPK_SAW() {
        try {
            //List<Double> hasil_saw = new ArrayList<>();
            Object[] header = {"NO","ALTERNATIF","BOBOT"};
            Object[][] data = null;
            DefaultTableModel model = new DefaultTableModel(data, header);
            hasilPembobotan.setModel(model); 
            int nomor = 0;
            
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                double harga = rs.getDouble("harga");
                double kualitas = rs.getDouble("kualitas");
                double fitur = rs.getDouble("fitur");
                double populer = rs.getDouble("populer");
                double purna_jual = rs.getDouble("purna_jual");
                double keawetan = rs.getDouble("keawetan");

                double pembagi_harga = label("harga").equals("cost") ? min("harga") : max("harga");
                double pembagi_kualitas = label("kualitas").equals("cost") ? min("kualitas") : max("kualitas");
                double pembagi_fitur = label("fitur").equals("cost") ? min("fitur") : max("fitur");
                double pembagi_populer = label("populer").equals("cost") ? min("populer") : max("populer");
                double pembagi_pjual = label("purna_jual").equals("cost") ? min("purna_jual") : max("purna_jual");
                double pembagi_keawetan = label("keawetan").equals("cost") ? min("keawetan") : max("keawetan");

                double norm_harga = label("harga").equals("cost") ? min("harga") / harga : harga / max("harga");
                double norm_kualitas = label("kualitas").equals("cost") ? min("kualitas") / kualitas : kualitas / max("kualitas");
                double norm_fitur = label("fitur").equals("cost") ? min("fitur") / fitur : fitur / max("fitur");
                double norm_populer = label("populer").equals("cost") ? min("populer") / populer : populer / max("populer");
                double norm_purna_jual = label("purna_jual").equals("cost") ? min("purna_jual") / purna_jual : purna_jual / max("purna_jual");
                double norm_keawetan = label("keawetan").equals("cost") ? min("keawetan") / keawetan : keawetan / max("keawetan");

//                System.out.println(bobot("harga"));
//                System.out.println(bobot("kualitas"));
//                System.out.println(bobot("fitur"));
//                System.out.println(bobot("populer"));
//                System.out.println(bobot("purna_jual"));
//                System.out.println(bobot("keawetan"));
                
                double hasil = (bobot("harga")*norm_harga)+(bobot("kualitas")*norm_kualitas)+(bobot("fitur")*norm_fitur)+(bobot("populer")*norm_populer)+(bobot("purna_jual")*norm_purna_jual)+(bobot("keawetan")*norm_keawetan);
                //hasil_saw.add(hasil);   
                nomor++;
                
                String nama_alt = rs.getString("nama");
                Object[] rowData = {nomor, nama_alt, hasil};
                model.addRow(rowData); 
                
            }
            //double max = Collections.max(hasil_saw);
            //System.out.println(max);
        } catch (Exception e) {
        }
    }

    private double min(String kolom) {
        double min = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT MIN(" + kolom + ") AS min_kolom FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                min = rs.getDouble("min_kolom");
            }
            return min;

        } catch (SQLException e) {
        }
        return min;
    }

    private double max(String kolom) {
        double max = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT MAX(" + kolom + ") AS max_kolom FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                max = rs.getDouble("max_kolom");
            }
            return max;

        } catch (SQLException e) {
        }
        return max;
    }

    private String label(String kolom) {
        String label = "cost";
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT label FROM kriteria WHERE nama='" + kolom + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                label = rs.getString("label");
            }
            return label;

        } catch (SQLException e) {
        }
        return label;
    }

    private double bobot(String kolom) {
        double bobot = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT bobot FROM kriteria WHERE nama='" + kolom + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                bobot = rs.getDouble("bobot");
            }
            return bobot;

        } catch (SQLException e) {
        }
        return bobot;
    }

}
